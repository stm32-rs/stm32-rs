_svd: ../svd/stm32f7x9.svd

_add:
  # This SVD is missing the ADC_Common peripheral that most other parts with
  # this ADC contain; consequently it's missing the CSR and CCR and CDR regs
  # from RM0410.
  ADC_Common:
    description: ADC common registers
    groupName: ADC
    baseAddress: 0x40012300
    addressBlock:
      offset: 0x0
      size: 0x400
    registers:
      CSR:
        description: ADC common status register
        addressOffset: 0x0
        access: read-only
        resetValue: 0x00000000
        fields:
          OVR3:
            description: Overrun flag of ADC3
            bitOffset: 21
            bitWidth: 1
          STRT3:
            description: Regular channel Start flag of ADC3
            bitOffset: 20
            bitWidth: 1
          JSTRT3:
            description: Injected channel Start flag of ADC3
            bitOffset: 19
            bitWidth: 1
          JEOC3:
            description: Injected channel end of conversion of ADC3
            bitOffset: 18
            bitWidth: 1
          EOC3:
            description: End of conversion of ADC3
            bitOffset: 17
            bitWidth: 1
          AWD3:
            description: Analog watchdog flag of ADC3
            bitOffset: 16
            bitWidth: 1

          OVR2:
            description: Overrun flag of ADC2
            bitOffset: 13
            bitWidth: 1
          STRT2:
            description: Regular channel Start flag of ADC2
            bitOffset: 12
            bitWidth: 1
          JSTRT2:
            description: Injected channel Start flag of ADC2
            bitOffset: 11
            bitWidth: 1
          JEOC2:
            description: Injected channel end of conversion of ADC2
            bitOffset: 10
            bitWidth: 1
          EOC2:
            description: End of conversion of ADC2
            bitOffset: 9
            bitWidth: 1
          AWD2:
            description: Analog watchdog flag of ADC2
            bitOffset: 8
            bitWidth: 1

          OVR1:
            description: Overrun flag of ADC1
            bitOffset: 5
            bitWidth: 1
          STRT1:
            description: Regular channel Start flag of ADC1
            bitOffset: 4
            bitWidth: 1
          JSTRT1:
            description: Injected channel Start flag of ADC1
            bitOffset: 3
            bitWidth: 1
          JEOC1:
            description: Injected channel end of conversion of ADC1
            bitOffset: 2
            bitWidth: 1
          EOC1:
            description: End of conversion of ADC1
            bitOffset: 1
            bitWidth: 1
          AWD1:
            description: Analog watchdog flag of ADC1
            bitOffset: 0
            bitWidth: 1

      CCR:
        description: ADC common control register
        addressOffset: 0x04
        access: read-write
        resetValue: 0x00000000
        fields:
          TSVREFE:
            description: Temperature sensor and V_REFINT enable
            bitOffset: 23
            bitWidth: 1
          VBATE:
            description: V_BAT enable
            bitOffset: 22
            bitWidth: 1
          ADCPRE:
            description: ADC prescaler
            bitOffset: 16
            bitWidth: 2
          DMA:
            description: Direct memory access mode for multi ADC mode
            bitOffset: 14
            bitWidth: 2
          DDS:
            description: DMA disable selection (for multi-ADC mode)
            bitOffset: 13
            bitWidth: 1
          DELAY:
            description: Delay between 2 sampling phases
            bitOffset: 8
            bitWidth: 4
          MULTI:
            description: Multi ADC mode selection
            bitOffset: 0
            bitWidth: 4

      CDR:
        description: ADC common regular data register for dual and triple modes
        addressOffset: 0x08
        access: read-only
        resetValue: 0x00000000
        fields:
          DATA2:
            description: 2nd data item of a pair of regular conversions
            bitOffset: 16
            bitWidth: 16
          DATA1:
            description: 1st data item of a pair of regular conversions
            bitOffset: 0
            bitWidth: 16


_modify:
  # Fix typo in the name of the LTDC peripheral
  "LTCD":
    name: "LTDC"
  "Flash":
    name: "FLASH"

"GPIO*":
  _modify:
    # SVD calls call OSPEEDR regs GPIOB_OSPEEDR, so fix that.
    GPIOB_OSPEEDR:
      name: OSPEEDR

FLASH:
  OPTKEYR:
    _modify:
      OPTKEY:
        name: OPTKEYR

RCC:
  # Add the LSEDRV that's not in the SVD but is in RM0410
  BDCR:
    _add:
      LSEDRV:
        description: LSE oscillator drive capability
        bitOffset: 3
        bitWidth: 2
        access: read-write
  PLLCFGR:
    _add:
      PLLR:
        description: PLL division factor for DSI clock
        bitOffset: 28
        bitWidth: 3
        access: read-write
    PLLR: [2, 7]

CRC:
  # The SVD calls the RESET field "CR", and misses some fields, fix per RM0410
  CR:
    _modify:
      CR:
        name: RESET
    _add:
      REV_OUT:
        description: Reverse output data
        bitOffset: 7
        bitWidth: 1
        access: read-write
      REV_IN:
        description: Reverse input data
        bitOffset: 5
        bitWidth: 2
        access: read-write
      POLYSIZE:
        description: Polynomial size
        bitOffset: 3
        bitWidth: 2
        access: read-write

Ethernet_MAC:
  MACFFR:
    _modify:
      # This field should be 2 bits wide but is only 1 bit in the SVD
      PCF:
        bitWidth: 2
  # All these fields are named incorrectly in the SVD compared to RM0090
  MACA1LR:
    _modify:
      MACA1LR:
        name: MACA1L
  MACA2HR:
    _modify:
      MAC2AH:
        name: MACA2H
  MACA2LR:
    _modify:
      MACA2L:
        bitWidth: 32
  MACA3LR:
    _modify:
      MBCA3L:
        name: MACA3L

Ethernet_DMA:
  DMABMR:
    _modify:
      # This field is named incorrectly in the SVD compared to the RM
      RTPR:
        name: PM

# Merge the thousands of individal bit fields into a single field for each
# CAN filter register. This is not only much easier to use but also saves
# a huge amount of filespace and compilation time etc -- as much as 30% of all
# fields in many devices are just these CAN filter bank fields.
"CAN*":
  "F?R?":
    _merge:
      - "FB*"
  "F??R?":
    _merge:
      - "FB*"

# Merge the hundreds of individual bit fields into single fields for the
# crypt key/iv registers.
CRYP:
  "K[0123][LR]R":
    _merge:
      - "b*"
  "IV[01][LR]R":
    _merge:
      - "IV*"

_include:
 - common_patches/4_nvic_prio_bits.yaml
 - common_patches/rename_ltcd.yaml
 - common_patches/f7_interrupts.yaml
 - common_patches/f7_interrupts_extra.yaml
 - ../peripherals/dac/dac_wavegen.yaml
 - ../peripherals/dac/dac_common_2ch.yaml
 - ../peripherals/rcc/rcc_v2.yaml
 - ../peripherals/rcc/rcc_merge_rtcsel.yaml
 - ../peripherals/gpio/gpio_v2.yaml
 - ../peripherals/crc/crc_basic.yaml
 - ../peripherals/spi/spi_v2.yaml
 - ../peripherals/adc/adc_v2_multi.yaml
 - ../peripherals/dma/dma_v2.yaml
 - ../peripherals/eth/eth_dma.yaml
 - ../peripherals/eth/eth_mmc.yaml
 - ../peripherals/eth/eth_mac.yaml
 - ../peripherals/wwdg/wwdg.yaml
 - ../peripherals/pwr/pwr_f7.yaml
 - ../peripherals/pwr/pwr_v2.yaml
 - ../peripherals/flash/flash_v2.yaml
