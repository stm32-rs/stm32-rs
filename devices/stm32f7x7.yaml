_svd: ../svd/stm32f7x7.svd

_rebase:
  USART1: USART6

_add:
  # This SVD is missing the ADC_Common peripheral that most other parts with
  # this ADC contain; consequently it's missing the CSR and CCR and CDR regs
  # from RM0410.
  ADC_Common:
    description: ADC common registers
    groupName: ADC_Common
    baseAddress: 0x40012300
    addressBlock:
      offset: 0x0
      size: 0x400
      usage: registers
    registers:
      CSR:
        description: ADC common status register
        addressOffset: 0x0
        access: read-only
        resetValue: 0x00000000
        fields:
          OVR3:
            description: Overrun flag of ADC3
            bitOffset: 21
            bitWidth: 1
          STRT3:
            description: Regular channel Start flag of ADC3
            bitOffset: 20
            bitWidth: 1
          JSTRT3:
            description: Injected channel Start flag of ADC3
            bitOffset: 19
            bitWidth: 1
          JEOC3:
            description: Injected channel end of conversion of ADC3
            bitOffset: 18
            bitWidth: 1
          EOC3:
            description: End of conversion of ADC3
            bitOffset: 17
            bitWidth: 1
          AWD3:
            description: Analog watchdog flag of ADC3
            bitOffset: 16
            bitWidth: 1

          OVR2:
            description: Overrun flag of ADC2
            bitOffset: 13
            bitWidth: 1
          STRT2:
            description: Regular channel Start flag of ADC2
            bitOffset: 12
            bitWidth: 1
          JSTRT2:
            description: Injected channel Start flag of ADC2
            bitOffset: 11
            bitWidth: 1
          JEOC2:
            description: Injected channel end of conversion of ADC2
            bitOffset: 10
            bitWidth: 1
          EOC2:
            description: End of conversion of ADC2
            bitOffset: 9
            bitWidth: 1
          AWD2:
            description: Analog watchdog flag of ADC2
            bitOffset: 8
            bitWidth: 1

          OVR1:
            description: Overrun flag of ADC1
            bitOffset: 5
            bitWidth: 1
          STRT1:
            description: Regular channel Start flag of ADC1
            bitOffset: 4
            bitWidth: 1
          JSTRT1:
            description: Injected channel Start flag of ADC1
            bitOffset: 3
            bitWidth: 1
          JEOC1:
            description: Injected channel end of conversion of ADC1
            bitOffset: 2
            bitWidth: 1
          EOC1:
            description: End of conversion of ADC1
            bitOffset: 1
            bitWidth: 1
          AWD1:
            description: Analog watchdog flag of ADC1
            bitOffset: 0
            bitWidth: 1

      CCR:
        description: ADC common control register
        addressOffset: 0x04
        access: read-write
        resetValue: 0x00000000
        fields:
          TSVREFE:
            description: Temperature sensor and V_REFINT enable
            bitOffset: 23
            bitWidth: 1
          VBATE:
            description: V_BAT enable
            bitOffset: 22
            bitWidth: 1
          ADCPRE:
            description: ADC prescaler
            bitOffset: 16
            bitWidth: 2
          DMA:
            description: Direct memory access mode for multi ADC mode
            bitOffset: 14
            bitWidth: 2
          DDS:
            description: DMA disable selection (for multi-ADC mode)
            bitOffset: 13
            bitWidth: 1
          DELAY:
            description: Delay between 2 sampling phases
            bitOffset: 8
            bitWidth: 4
          MULTI:
            description: Multi ADC mode selection
            bitOffset: 0
            bitWidth: 5

      CDR:
        description: ADC common regular data register for dual and triple modes
        addressOffset: 0x08
        access: read-only
        resetValue: 0x00000000
        fields:
          DATA2:
            description: 2nd data item of a pair of regular conversions
            bitOffset: 16
            bitWidth: 16
          DATA1:
            description: 1st data item of a pair of regular conversions
            bitOffset: 0
            bitWidth: 16

DSI:
  _strip:
    - "DSI_"

_modify:
  # Fix typo in the name of the LTDC peripheral
  "LTCD":
    name: "LTDC"
  "Flash":
    name: "FLASH"

"GPIO*":
  _modify:
    # SVD calls call OSPEEDR regs GPIOB_OSPEEDR, so fix that.
    GPIOB_OSPEEDR:
      name: OSPEEDR

FLASH:
  OPTKEYR:
    _modify:
      OPTKEY:
        name: OPTKEYR

RCC:
  PLLCFGR:
    _add:
      PLLR:
        description: PLL division factor for DSI clock
        bitOffset: 28
        bitWidth: 3
        access: read-write

TIM[1-58],TIM12:
  SMCR:
    _add:
      SMS_3:
        description: Slave mode selection - bit 3
        bitOffset: 16
        bitWidth: 1

Ethernet_MAC:
  MACFFR:
    _modify:
      # This field should be 2 bits wide but is only 1 bit in the SVD
      PCF:
        bitWidth: 2
  # All these fields are named incorrectly in the SVD compared to RM0090
  MACA1LR:
    _modify:
      MACA1LR:
        name: MACA1L
  MACA2HR:
    _modify:
      MAC2AH:
        name: MACA2H
  MACA2LR:
    _modify:
      MACA2L:
        bitWidth: 32
  MACA3LR:
    _modify:
      MBCA3L:
        name: MACA3L

Ethernet_DMA:
  DMABMR:
    _modify:
      # This field is named incorrectly in the SVD compared to the RM
      RTPR:
        name: PM

# Merge the thousands of individal bit fields into a single field for each
# CAN filter register. This is not only much easier to use but also saves
# a huge amount of filespace and compilation time etc -- as much as 30% of all
# fields in many devices are just these CAN filter bank fields.
"CAN*":
  "F?R?":
    _merge:
      - "FB*"
  "F??R?":
    _merge:
      - "FB*"

# Merge the hundreds of individual bit fields into single fields for the
# crypt key/iv registers.
CRYP:
  "K[0123][LR]R":
    _merge:
      - "b*"
  "IV[01][LR]R":
    _merge:
      - "IV*"

MPU:
  _strip:
    - "MPU_"

JPEG:
  _strip:
    - "JPEG_"


_include:
 - common_patches/dfsdm/f7.yaml
 - common_patches/ltdc/rename.yaml
 - common_patches/f7_interrupts.yaml
 - common_patches/ltdc/f7_ltdc_interrupts.yaml
 - common_patches/rcc/pllsai.yaml
 - common_patches/dma/fcr_wo.yaml
 - common_patches/ethernet/mac_regs.yaml
 - common_patches/ethernet/mmc.yaml
 - common_patches/usart/merge_CR1_DEATx_fields.yaml
 - common_patches/usart/merge_CR1_DEDTx_fields.yaml
 - common_patches/usart/merge_CR2_ABRMODx_fields.yaml
 - common_patches/usart/merge_CR2_ADDx_fields.yaml
 - common_patches/usart/rename_CR2_DATAINV_field.yaml
 - common_patches/usart/merge_BRR_fields.yaml
 - common_patches/can/can.yaml
 - common_patches/can/can_filter_bank.yaml
 - ../peripherals/can/can.yaml
 - common_patches/cryp/cryp_v2.yaml
 - common_patches/ltdc/ltdc.yaml
 - common_patches/ltdc/f4_f7_ltdc_bccr.yaml
 - ../peripherals/ltdc/ltdc.yaml
 - common_patches/sai/sai_v1.yaml
 - ../peripherals/sai/sai.yaml
 - common_patches/rcc/add_plli2sp.yaml
 - common_patches/rcc/f7_apbenr.yaml
 - common_patches/rcc/f7_lsedrv.yaml
 - common_patches/rcc/f7_rename_dckcfgr.yaml
 - common_patches/rcc/f7_dckcfgr.yaml
 - common_patches/rcc/f7_dckcfgr_sdmmc1.yaml
 - common_patches/rcc/f7_dckcfgr_RM0410.yaml
 - ../peripherals/dac/dac_wavegen.yaml
 - ../peripherals/dac/dac_common_2ch.yaml
 - ../peripherals/dac/dac_dmaudr.yaml
 - ../peripherals/rcc/rcc_merge_sw_sws.yaml
 - ../peripherals/rcc/rcc_f7.yaml
 - ../peripherals/rcc/rcc_v2_pllcfgr_pllr.yaml
 - ../peripherals/rcc/rcc_v2_i2s_pllp.yaml
 - ../peripherals/rcc/rcc_v2_sai_pllr.yaml
 - ../peripherals/rcc/rcc_v2_dckcfgr_saidivr.yaml
 - ../peripherals/rcc/rcc_v2_dckcfgr_dfsdm_f7.yaml
 - ../peripherals/rcc/rcc_v2_dckcfgr_dsisel.yaml
 - ../peripherals/rcc/rcc_v2_dckcfgr2_cecsel.yaml
 - ../peripherals/rcc/rcc_merge_rtcsel.yaml
 - ../peripherals/gpio/v2/common.yaml
 - common_patches/crc/crc_rename_init.yaml
 - common_patches/crc/f7_polysize_rev_in_rev_out.yaml
 - ../peripherals/crc/crc_advanced.yaml
 - ../peripherals/crc/crc_idr_8bit.yaml
 - ../peripherals/crc/crc_pol.yaml
 - ../peripherals/spi/spi_v2.yaml
 - ../peripherals/adc/adc_v2_smpr.yaml
 - ../peripherals/adc/adc_v2_multi.yaml
 - ../peripherals/adc/adc_v2/adc_v2_extsel_d.yaml
 - common_patches/dma/dma_v21.yaml
 - ../peripherals/dma/dma_v21.yaml
 - ../peripherals/eth/eth_dma_common.yaml
 - ../peripherals/eth/eth_dma_mb_edfe_dmarswtr.yaml
 - ../peripherals/eth/eth_mac_common.yaml
 - ../peripherals/eth/eth_mac_cstf.yaml
 - ../peripherals/eth/eth_mmc_common.yaml
 - ../peripherals/eth/eth_mmc_mcfhp_mcp.yaml
 - common_patches/jpeg/ram.yaml
 - ../peripherals/wwdg/wwdg.yaml
 - ../peripherals/pwr/pwr_f7.yaml
 - ../peripherals/pwr/pwr_v2.yaml
 - ../peripherals/flash/flash_v2_dual_bank.yaml
 - common_patches/tim/tim_o24ce.yaml
 - common_patches/tim/tim10_14_missing_opm.yaml
 - common_patches/tim/common.yaml
 - ../peripherals/tim/tim_basic.yaml
 - ../peripherals/tim/tim6.yaml
 - ../peripherals/tim/tim2345_mixed.yaml
 - common_patches/tim/tim2345_mixed_l.yaml
 - ../peripherals/tim/tim_advanced.yaml
 - common_patches/tim/tim_ccr.yaml
 - common_patches/tim/f7.yaml
 - common_patches/tim/v2/f7.yaml
 - common_patches/rcc/f765_f7x7_f7x9_common.yaml
 - common_patches/f745_f750_f765_f7x6_f7x7_f7x9_common.yaml
 - common_patches/syscfg/f765_f7x7_f7x9.yaml
 - ../peripherals/tim/v2/ccm.yaml
 - ../peripherals/iwdg/iwdg_with_WINR.yaml
 - ../peripherals/exti/exti.yaml
 - ../peripherals/i2c/i2c_v2.yaml
 - ../peripherals/usart/usart_v2B1.yaml
 - common_patches/hash/hash.yaml
 - common_patches/mdios/mdios.yaml
 - common_patches/rtc/alarm.yaml
 - common_patches/rtc/rtc_bkpr.yaml
 - common_patches/dbgmcu/f7.yaml
 - common_patches/fsmc/fsmc_sram.yaml
 - common_patches/fsmc/fsmc_sramfix.yaml
 - common_patches/fsmc/fsmc_nand_v2.yaml
 - common_patches/fsmc/fsmc_sd.yaml
 - ../peripherals/fsmc/fsmc_sram.yaml
 - ../peripherals/fsmc/fsmc_wfdis.yaml
 - ../peripherals/fsmc/fsmc_nand.yaml
 - ../peripherals/fsmc/fsmc_sd.yaml
 - ../peripherals/dma/dma2d_v1.yaml
 - common_patches/rtc/rtc_cr.yaml
 - ../peripherals/rtc/rtc_common.yaml
